# Checking for GPS signal

Before continuing, make sure that the blue LED in the Neo 6M is blinking. The blinking blue LED
means that it is receiving GPS data. It takes a few minutes for the blinking to start after powering up the module. If after 5 - 8 mins it has not started blinking, move near a window or any place under the open sky. 

When the blue led is blinking, run the following command:

`
sudo cat /dev/ttyAMA0
`

You should see lots of data, similar to what is shown in the image below. 

<p align="center">
<img src="./Images/GPS_data.png" width="500">
</p>

That means it's working. To stop this, type Ctrl + c .

These numbers contain a whole host of data, and we need to filter it to pull out the latitude and longtitude. For that, we'll write a short Python program and use a special command, `NMEAStreamReader()`.

# Setup for writing the Python Code:

Before we write the python code to get the GPS data, we need set up a few things again.

By default, the Raspberry Pi uses serial port for this “console” login, so if we want to use the serial port to get data from the GPS module we need to disable the console login.

There are two serial ports: serial0 and serial1. Serial0 will point to GPIO pins 14 and 15, so we have to use serial 0. To see which port is connected with serial0, use the follwoing command:

`
ls -l /dev
`

There are two possible outputs. Either in the output to the command above, you'll see that serial0 is linked with ttyAMA0, in which case to disable the console you need to use the follwing commands:

```
sudo systemctl stop serial-getty@ttyAMA0.service
sudo systemctl disable serial-getty@ttyAMA0.service
```

Or serial0 is linked with ttyS0. Therefore, to disable the console you need to use the follwing commands:

```
sudo systemctl stop serial-getty@ttyS0.service
sudo systemctl disable serial-getty@ttyS0.service
```

## Lets write the Python Code:

### Set up

In order to write the programs it's good practice to create a directory on the desktop of the Raspberry Pi.

So let's get onto the desktop first

`
cd Despktop
`

Then make a folder (or directory) for the GPS tracker

`
mkdir GPS_Tracker
`
Then let's go into that directory.

`
cd GPS_Tracker
`
You'll notice the starting text you have showing in your terminal window identifies that you're working in the directory. 

If you want to go backwards out of a directory, you can using the command
`
cd ..
`

Using the command 
`
ls
` 
will list what directories and files are contained in the directory you're in.

These commands are 

To prepare for the coding, we need to create a virtual environment on the RaspberryPi, allowing us to ensure we can install the relevant librabries.

`
python -m venv my-venv
`

Now we need to install a few python libraries so we have access to the right commands. It may take a few moments between each command for the libraries to install, so be patient:

```
my-venv/bin/pip install pynmea2
my-venv/bin/pip install pyserial
my-venv/bin/pip install pyrebase4
```

Now finally we are ready to write the code! 

You'll create the code in a text editor on the RaspberryPi (in our case, nano). 

`
nano gps_print.py
`

Once in the editor you can copy the gps_print.py code. Then exit and save.

```
import serial
import time
import string
import pynmea2

while True:
	port="/dev/ttyAMA0"
	ser=serial.Serial(port, baudrate=9600, timeout=0.5)
	dataout = pynmea2.NMEAStreamReader()
	newdata=ser.readline()

	if newdata[0:6] == "$GPRMC":
		newmsg=pynmea2.parse(newdata)
		lat=newmsg.latitude
		lng=newmsg.longitude
		gps = "Latitude=" + str(lat) + "and Longitude=" + str(lng)
		print(gps)

```

To run this python code you'll use the command

`
my-venv/bin/python3 gps_print.py
`

and you will see a output like this:

<p align="center">
<img src="./Images/Print_gps.png" width="300">
</p>

